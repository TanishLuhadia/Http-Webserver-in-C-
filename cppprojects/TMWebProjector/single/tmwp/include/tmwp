#include<iostream>
#include<string.h>
#include<stdlib.h>
#include<utility>
#include<map>
using namespace std;
namespace tmwp
{
class Request
{
public:
char *method;
char *resource;
char isClientSideTechnologyResource;
char isSpecial;
char *mimeType;
int dataCount;
char **data;
string forwardTo;
string get(string name); // to extract data that  has arrived in request
void setKeyValue(string k,string v);
string getValue(string k);
void forward(string forawrdTo);
map<string,string> keyValues; 
};
class Response
{
private:
int clientSocketDescriptor;
bool isClosed;
bool headerCreated;
void createHeader();
public :
Response(int clientSocketDescriptor);
void write(const char *str);
void write(string str);
// you need to overload more methods for primitive types
void close();
};
class TMWebProjector
{
private:
int portNumber;
map<string,void(*)(Request &,Response&)> requestMappings; 
public:
TMWebProjector(int portNumber);
~TMWebProjector();
void start();
void onRequest(string url,void(*ptrOnRequest)(Request &,Response &));
};
}